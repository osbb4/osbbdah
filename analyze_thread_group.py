import sqlite3
import openai
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY
DB_PATH = "db/OSBBDAH.sqlite"

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏, —è–∫—ñ —â–µ –Ω–µ –∞–Ω–∞–ª—ñ–∑—É–≤–∞–ª–∏—Å—å
cursor.execute("""
SELECT g.group_id, g.topic_id
FROM semantic_thread_groups g
LEFT JOIN semantic_themes st ON g.group_id = st.theme_id
WHERE st.theme_id IS NULL
LIMIT 1
""")
group = cursor.fetchone()

if not group:
    print("‚úÖ –£—Å—ñ —Å–º–∏—Å–ª–æ–≤—ñ —Ç–µ–º–∏ –≤–∂–µ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ.")
    exit()

group_id, topic_id = group
print(f"üß† –ê–Ω–∞–ª—ñ–∑ –≥—Ä—É–ø–∏ {group_id} –≤ —Ç–µ–º—ñ {topic_id}")

# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
cursor.execute("""
SELECT m.message_id, m.text
FROM messages m
JOIN message_to_group mg ON m.message_id = mg.message_id
WHERE mg.group_id = ?
ORDER BY m.date ASC
""", (group_id,))
messages = cursor.fetchall()

if not messages:
    print("‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ.")
    exit()

# –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
conversation = "\n".join([f"{i+1}. {text}" for i, (mid, text) in enumerate(messages)])

prompt = f"""
–ù–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –û–°–ë–ë:

{conversation}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞:
1. –ö–æ—Ä–æ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª—é–π —Å—É—Ç—å –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è (summary)
2. –í–∏–∑–Ω–∞—á –≥–æ–ª–æ–≤–Ω—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è (problem)
3. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —Ä—ñ—à–µ–Ω–Ω—è –∞–±–æ –≤–∏—Å–Ω–æ–≤–∫–∏ (solution)

–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –±–ª–æ–∫–∏:
Summary: ...
Problem: ...
Solution: ...
"""

try:
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –û–°–ë–ë –≤ –£–∫—Ä–∞—ó–Ω—ñ."},
            {"role": "user", "content": prompt}
        ],
        temperature=0
    )
    reply = response.choices[0].message.content.strip()

    summary = problem = solution = ""

    for line in reply.splitlines():
        if line.lower().startswith("summary:"):
            summary = line.split(":", 1)[1].strip()
        elif line.lower().startswith("problem:"):
            problem = line.split(":", 1)[1].strip()
        elif line.lower().startswith("solution:"):
            solution = line.split(":", 1)[1].strip()

    cursor.execute("""
        INSERT INTO semantic_themes (theme_id, topic_id, title, summary, problem, solution)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (group_id, topic_id, f"Theme from group {group_id}", summary, problem, solution))
    conn.commit()
    print("‚úÖ GPT-–∞–Ω–∞–ª—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")

conn.close()
