import sqlite3
import openai
from config import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY
DB_PATH = "db/OSBBDAH.sqlite"

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

# –î–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É last_analyzed_at, —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è
cursor.execute("PRAGMA table_info(semantic_themes)")
columns = [row[1] for row in cursor.fetchall()]
if "last_analyzed_at" not in columns:
    cursor.execute("ALTER TABLE semantic_themes ADD COLUMN last_analyzed_at TEXT")
    # –ø—Ä–∏–≤ º—è–∑–∞—Ç–∏ GPT-—Ç–µ–º—É –¥–æ semantic_thread_groups
    cursor.execute("UPDATE semantic_thread_groups SET theme_id = ? WHERE group_id = ?", (theme_id, group_id))
    # —Ç–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ theme_id –≤ —Ç–∞–±–ª–∏—Ü—ñ messages
    cursor.execute("""
            UPDATE messages SET theme_id = ? WHERE message_id IN (
            SELECT message_id FROM message_to_group WHERE group_id = ?
            )
    """, (theme_id, group_id))
    conn.commit()
    print("‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–∫—É last_analyzed_at —É semantic_themes.")

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –≥—Ä—É–ø–∏, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏
cursor.execute("""
SELECT g.group_id, g.topic_id
FROM semantic_thread_groups g
LEFT JOIN semantic_themes st ON g.group_id = st.theme_id
WHERE st.last_analyzed_at IS NULL
   OR EXISTS (
       SELECT 1 FROM messages m
       JOIN message_to_group mg ON m.message_id = mg.message_id
       WHERE mg.group_id = g.group_id
         AND datetime(m.date) > IFNULL(datetime(st.last_analyzed_at), '1970-01-01')
   )
""")
groups = cursor.fetchall()

if not groups:
    print("‚úÖ –£—Å—ñ —Å–º–∏—Å–ª–æ–≤—ñ —Ç–µ–º–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ, –Ω—ñ—á–æ–≥–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏.")
    conn.close()
    exit()

print(f"üîç –ì—Ä—É–ø –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {len(groups)}")

for group_id, topic_id in groups:
    print(f"üß† –ê–Ω–∞–ª—ñ–∑ –≥—Ä—É–ø–∏ {group_id} –≤ —Ç–µ–º—ñ {topic_id}")

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏
    cursor.execute("""
    SELECT m.message_id, m.text
    FROM messages m
    JOIN message_to_group mg ON m.message_id = mg.message_id
    WHERE mg.group_id = ?
    ORDER BY m.date ASC
    """, (group_id,))
    messages = cursor.fetchall()

    if not messages:
        print(f"‚ö†Ô∏è –ì—Ä—É–ø–∞ {group_id} –ø–æ—Ä–æ–∂–Ω—è.")
        continue

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç–∞
    conversation = "\n".join([f"{i+1}. {text}" for i, (mid, text) in enumerate(messages)])
    prompt = f"""
–ù–∏–∂—á–µ –Ω–∞–≤–µ–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –û–°–ë–ë:

{conversation}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞:
1. –ö–æ—Ä–æ—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª—é–π —Å—É—Ç—å –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è (summary)
2. –í–∏–∑–Ω–∞—á –≥–æ–ª–æ–≤–Ω—É –ø—Ä–æ–±–ª–µ–º—É –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è (problem)
3. –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π —Ä—ñ—à–µ–Ω–Ω—è –∞–±–æ –≤–∏—Å–Ω–æ–≤–∫–∏ (solution)

–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –±–ª–æ–∫–∏:
Summary: ...
Problem: ...
Solution: ...
"""

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –û–°–ë–ë –≤ –£–∫—Ä–∞—ó–Ω—ñ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0
        )
        reply = response.choices[0].message.content.strip()

        summary = problem = solution = ""
        for line in reply.splitlines():
            if line.lower().startswith("summary:"):
                summary = line.split(":", 1)[1].strip()
            elif line.lower().startswith("problem:"):
                problem = line.split(":", 1)[1].strip()
            elif line.lower().startswith("solution:"):
                solution = line.split(":", 1)[1].strip()

        # –í—Å—Ç–∞–≤–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑
        cursor.execute("SELECT 1 FROM semantic_themes WHERE theme_id = ?", (group_id,))
        exists = cursor.fetchone()

        if exists:
            cursor.execute("""
                UPDATE semantic_themes
                SET summary = ?, problem = ?, solution = ?, last_analyzed_at = datetime('now')
                WHERE theme_id = ?
            """, (summary, problem, solution, group_id))
        else:
            cursor.execute("""
                INSERT INTO semantic_themes (theme_id, topic_id, title, summary, problem, solution, last_analyzed_at)
                VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
            """, (group_id, topic_id, f"Theme from group {group_id}", summary, problem, solution))
                # –ø—Ä–∏–≤ º—è–∑–∞—Ç–∏ GPT-—Ç–µ–º—É –¥–æ semantic_thread_groups
        cursor.execute("UPDATE semantic_thread_groups SET theme_id = ? WHERE group_id = ?", (theme_id, group_id))
        conn.commit()
        print(f"‚úÖ –ì—Ä—É–ø–∞ {group_id} –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –≥—Ä—É–ø–∏ {group_id}: {e}")
        continue

conn.close()
print("üèÅ –ê–Ω–∞–ª—ñ–∑ —É—Å—ñ—Ö –≥—Ä—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
